# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: node:latest

variables:
  MQ_HOST: rabbitmq

stages:
- build
- test
- publish

build:
  stage: build
  script:
    - npm install
    - npm run build
  cache:
    paths:
      - node_modules/
      - dist/
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - node_modules/
      - dist/

test:
  services:
    - rabbitmq:latest
  stage: test
  script:
    - npm run test:ci
  coverage: /All\sfiles.*?\s+(\d+.\d+)/

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - package.json
  script:
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}  
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish --verbose --access=public
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to npm registry"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi

